#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_ARB_shading_language_include : require
#extension GL_EXT_shader_realtime_clock : require
#extension GL_GOOGLE_include_directive : require

struct CameraMatrixParams {
    mat4 view_inv;
    mat4 proj_inv;
};

layout(set = 0, binding = 0) uniform accelerationStructureEXT tlas;
layout(set = 0, binding = 1) uniform camera_matrix_ubo { CameraMatrixParams cam; };

layout(set = 1, binding = 0, rgba8) uniform image2D result;

#include "mode_push_constant.glsl"
#include "random.glsl"
#include "ray_payload.glsl"

layout(location = 0) rayPayloadEXT RayPayload ray_payload;
layout(location = 3) rayPayloadEXT uint payload_seed;

// Max. number of recursion is passed via a specialization constant
layout(constant_id = 0) const int kMaxRecursion = 0;

void main() {
    uint seed =
        tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockRealtimeEXT()));
    const float r1 = rnd(seed);
    const float r2 = rnd(seed);

    // Subpixel jitter: send the ray through a different position inside the pixel
    // each time, to provide antialiasing.
    const vec2 subpixel_jitter = mode.mode == 1 ? vec2(0.5, 0.5) : vec2(r1, r2);
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter;
    const vec2 uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    const vec2 d = uv * 2.0 - 1.0;

    vec4 origin = cam.view_inv * vec4(0, 0, 0, 1);
    const vec4 target = cam.proj_inv * vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.view_inv * vec4(normalize(target.xyz), 0);

    const float tmin = 0.01;
    const float tmax = 1000.0;

    const int samples = 1;
    vec3 result_color = vec3(0);
    ray_payload.color = vec3(1);

    for (int smpl = 0; smpl < samples; smpl++) {
        for (int i = 0; i < kMaxRecursion; i++) {
            payload_seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x,
                               int(clockRealtimeEXT()));
            traceRayEXT(tlas, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz,
                        tmax, 0);

            if (ray_payload.dist < 0.0f) {
                result_color += ray_payload.color;
                break;
            } else if (ray_payload.reflector == 1.0f) {
                const vec4 hit_pos = origin + direction * ray_payload.dist;
                origin.xyz = hit_pos.xyz + ray_payload.normal * 0.001f;
                direction.xyz = reflect(direction.xyz, ray_payload.normal);
                result_color += ray_payload.color;
            } else {
                result_color += ray_payload.color;
                break;
            }
        }
    }

    result_color = result_color / float(samples);
    imageStore(result, ivec2(gl_LaunchIDEXT.xy), vec4(result_color, 1.0));
}