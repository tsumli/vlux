#version 460

struct TransformParams {
    mat4x4 world;
    mat4x4 view_proj;
    mat4x4 world_view_proj;
    mat4x4 proj_to_world;
};

struct CameraParams {
    vec4 pos;
};

struct LightParams {
    vec4 pos;
    float range;
    vec4 color;
};

struct ModePushConstants {
    uint mode;
};

layout(push_constant) uniform push_mode { ModePushConstants mode; };

layout(set = 0, binding = 0) uniform ubo_transform { TransformParams transform; };

layout(set = 0, binding = 1) uniform ubo_camera { CameraParams camera; };

layout(local_size_x = 16, local_size_y = 16) in;

layout(rgba32f, set = 1, binding = 0) uniform readonly image2D color;
layout(rgba32f, set = 1, binding = 1) uniform readonly image2D normal;
layout(rgba32f, set = 1, binding = 2) uniform readonly image2D position;
layout(rgba32f, set = 1, binding = 3) uniform readonly image2D emissive;
layout(rgba32f, set = 1, binding = 4) uniform readonly image2D base_color_factor;
layout(rgba32f, set = 1, binding = 5) uniform readonly image2D metallic_roughness_factor;
layout(rgba32f, set = 1, binding = 6) uniform readonly image2D metallic_roughness;
layout(r32f, set = 1, binding = 7) uniform image2D depth;
layout(rgba32f, set = 1, binding = 8) uniform writeonly image2D result;

layout(set = 2, binding = 0) uniform ubo_light { LightParams light; };

vec4 ReconstructWorldPositionFromDepth(in vec2 coords, in float depth, in float inv_width,
                                       in float inv_height) {
    const vec2 inv_screen_res = vec2(inv_width, inv_height);

    //! normalize from [0, 1] to [-1, 1] and flip vertically, then
    //! (-1, -1): bottom left, (1, 1): top right
    const vec2 screen_pos = (coords * inv_screen_res) * 2.0f - 1.0f;

    const vec4 raw_world_pos =
        transform.proj_to_world * vec4(screen_pos * vec2(1.0f, -1.0f), depth, 1.0f);
    return raw_world_pos / raw_world_pos.w;
}

const float PI = 3.14159265359f;
vec3 LambertianDiffuse(in vec3 pixel_color) { return pixel_color / PI; }

vec3 CookTorranceBRDF(in const vec3 N, in const vec3 V, in const vec3 L, in const vec3 albedo,
                      in const float roughness, in const float metalness) {
    vec3 H = normalize(V + L);
    float NdotL = max(dot(N, L), 0.0);
    float NdotV = max(dot(N, V), 0.0);
    float NdotH = max(dot(N, H), 0.0);
    float VdotH = max(dot(V, H), 0.0);

    // Fresnel term (Schlick approximation)
    float F0 = 0.04;
    float F = F0 + (1.0 - F0) * pow(1.0 - VdotH, 5.0);

    // Distribution term (GGX/Trowbridge-Reitz)
    float alpha = roughness * roughness;
    float alpha2 = alpha * alpha;
    float denom = NdotH * NdotH * (alpha2 - 1.0) + 1.0;
    float D = alpha2 / (PI * denom * denom);

    // Geometric term (Smith's method)
    float k = alpha / 2.0;
    float G = NdotL / (NdotL * (1.0 - k) + k);
    G *= NdotV / (NdotV * (1.0 - k) + k);

    // Specular term
    vec3 Fc = vec3(F);
    vec3 Fs = D * Fc * G / (4.0 * NdotL * NdotV);

    // Combine specular and diffuse
    vec3 diffuse = (1.0 - Fc) * albedo / PI;
    return NdotL * (diffuse + Fs);
}

void main() {
    const uint width = imageSize(result).x;
    const uint height = imageSize(result).y;
    if (gl_GlobalInvocationID.x >= width || gl_GlobalInvocationID.y >= height) {
        return;
    }

    const float pixel_depth = imageLoad(depth, ivec2(gl_GlobalInvocationID.xy)).x;
    const vec4 pixel_pos = imageLoad(position, ivec2(gl_GlobalInvocationID.xy));

    const vec4 pixel_metallic_roughness_factor =
        imageLoad(metallic_roughness_factor, ivec2(gl_GlobalInvocationID.xy));
    const float pixel_metallic_factor = pixel_metallic_roughness_factor.x;
    const float pixel_roughness_factor = pixel_metallic_roughness_factor.y;

    const vec4 pixel_metallic_roughness =
        imageLoad(metallic_roughness, ivec2(gl_GlobalInvocationID.xy));
    const float pixel_metallic = pixel_metallic_roughness.x * pixel_metallic_factor;
    const float pixel_roughness = pixel_metallic_roughness.y * pixel_roughness_factor;

    const vec4 pixel_base_color_factor =
        imageLoad(base_color_factor, ivec2(gl_GlobalInvocationID.xy));
    const vec4 pixel_color =
        imageLoad(color, ivec2(gl_GlobalInvocationID.xy)) * pixel_base_color_factor;

    const vec4 pixel_normal = imageLoad(normal, ivec2(gl_GlobalInvocationID.xy));
    const vec4 pixel_emissive = imageLoad(emissive, ivec2(gl_GlobalInvocationID.xy));

    // Lighting Calculation
    const float distance = length(light.pos.xyz - pixel_pos.xyz);
    const float attenuation =
        1.0 / (1.0 + 0.07 * distance + 0.017 * distance * distance) * light.range;

    const vec3 cook_torrance_brdf =
        CookTorranceBRDF(pixel_normal.xyz, normalize(camera.pos.xyz - pixel_pos.xyz),
                         normalize(light.pos.xyz - pixel_pos.xyz), pixel_color.xyz, pixel_roughness,
                         pixel_metallic) *
        light.color.xyz * attenuation;

    vec3 final_color = clamp(cook_torrance_brdf, 0.0, 1.0) + pixel_emissive.xyz;

    // gamma correction
    final_color = pow(final_color, vec3(0.45));

    switch (mode.mode) {
        case 0:
            imageStore(result, ivec2(gl_GlobalInvocationID.xy), vec4(final_color.xyz, 1.0f));
            break;
        case 1:
            imageStore(result, ivec2(gl_GlobalInvocationID.xy), vec4(pixel_color.xyz, 1.0f));
            break;
        case 2:
            imageStore(result, ivec2(gl_GlobalInvocationID.xy), vec4(pixel_normal.xyz, 1.0f));
            break;
        case 3:
            imageStore(result, ivec2(gl_GlobalInvocationID.xy), vec4(pixel_pos.xyz, 1.0f));
            break;
        case 4:
            imageStore(result, ivec2(gl_GlobalInvocationID.xy),
                       vec4(pixel_depth, 0.0f, 0.0f, 1.0f));
            break;
        case 5:
            imageStore(result, ivec2(gl_GlobalInvocationID.xy), vec4(pixel_emissive.xyz, 1.0f));
            break;
        case 6:
            imageStore(result, ivec2(gl_GlobalInvocationID.xy),
                       vec4(pixel_base_color_factor.xyz, 1.0f));
            break;
        case 7:
            imageStore(result, ivec2(gl_GlobalInvocationID.xy),
                       vec4(pixel_metallic_roughness_factor.xyz, 1.0f));
            break;
        case 8:
            imageStore(result, ivec2(gl_GlobalInvocationID.xy),
                       vec4(pixel_metallic_roughness.xyz, 1.0f));
            break;
        default:
            break;
    }
}